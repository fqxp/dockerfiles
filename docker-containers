#! /bin/bash
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Foo Bar <foobar@baz.org>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Start docker containers"
NAME=docker-containers
DAEMON=/usr/bin/docker
#DAEMON_ARGS="--options args"
#PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

CONTAINER_DIR=/etc/docker-containers
CONTAINER_RUN_DIR=/var/run/docker-containers

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

mkdir -p /var/run/docker-containers

function start_container()
{
  CONTAINER=$1

  DOCKER_OPTIONS="$(cat $CONTAINER_DIR/$CONTAINER)"
  ID=$(docker run -d $DOCKER_OPTIONS $CONTAINER)
  echo $ID >> "$CONTAINER_RUN_DIR/$CONTAINER"
  echo $ID
}

function stop_container()
{
  CONTAINER=$1

  ID=$(cat $CONTAINER_RUN_DIR/$CONTAINER)
  docker stop $ID
}

restart_container()
{
  CONTAINER=$1

  ID=$(cat $CONTAINER_RUN_DIR/$CONTAINER)
  docker restart $ID
}
#
# Function that starts the daemon/service
#
do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started

  for CONTAINER in $(ls $CONTAINER_DIR); do
    echo -ne "\nStarting docker container $CONTAINER: "
    ID=$(start_container $CONTAINER)
    echo -n $ID
  done
  echo

  return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  for CONTAINER in $(ls $CONTAINER_RUN_DIR); do
    echo -ne "\nStopping docker container $CONTAINER: "
    ID=$(stop_container $CONTAINER)
    echo -n $ID
  done
  echo
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_restart() {
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  for CONTAINER in $(ls $CONTAINER_DIR); do
    echo -ne "\nRestarting docker container $CONTAINER: "
    ID=$(restart_container $CONTAINER)
    echo -n $ID
  done
  echo
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    docker ps
    ;;
  restart)
    [ "$VERBOSE" != no ] && log_daemon_msg "Restarting $DESC" "$NAME"
    do_restart
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
    exit 3
    ;;
esac
